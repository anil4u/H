---
- hosts: all
  become: true
  tasks:
    - name: Clean out yum
      command: yum clean all

    - name: Update the OS and restart
      yum: name=* state=latest
      notify: restart host

    - name: Put the Kubernetes repo in place
      copy: src=./files/kubernetes.repo dest=/etc/yum.repos.d/kubernetes.repo

    - name: Put the Jenkins repo in place
      get_url: url=http://pkg.jenkins-ci.org/redhat/jenkins.repo dest=/etc/yum.repos.d/jenkins.repo

    - name: Import their key
      command: rpm --import https://jenkins-ci.org/redhat/jenkins-ci.org.key

    - name: Install some packages we need
      yum: name={{ item }} state=latest
      with_items:
          - java
          - docker
          - kubelet
          - kubeadm
          - kubectl
          - kubernetes-cni
          - jenkins

    - name: let's set docker to be available to nonroot
      group: name=docker state=present

    - name: Set various services to be running and to restart on reboot
      service: name={{ item }} state=running enabled=true
      with_items:
          - docker
          - kubelet
          - jenkins

    - name: make sure jenkins can use docker
      command: usermod -a -G docker jenkins

    - name: create a place for the twistlock installation to live
      file: dest="{{ ansible_user_dir }}/twistlock" owner=root group=root mode=0755 state=directory

    - name: copy over the tarball - Please note that if the archive has already been unpacked *regardless* of version this will be skipped!
      unarchive: src=https://cdn.twistlock.com/def3a000/twistlock_2_0_67.tar.gz dest="{{ ansible_user_dir }}/twistlock" creates={{ ansible_user_dir }}/twistlock/version.txt remote_src=True

    - name: run the onebox install (-y to accept that we've not got the recommend minimum resources and -s to accept the license)
      command: "{{ ansible_user_dir }}/twistlock/twistlock.sh -ys onebox"

    - name: we need to wait for it all to start up...
      uri:
        url: "http://127.0.0.1:8081/api/v1/_ping"
        status_code: 200
      register: result
      until: result.status == 200
      retries: 60
      delay: 1 

    - name: generate a password
      command: curl http://www.sethcardoza.com/api/rest/tools/random_password_generator
      register: new_password
      run_once: true
      delegate_to: 127.0.0.1
      become: false

    - name: Add admin user if it doesn't exist already
      uri:
          url: https://localhost:8083/api/v1/signup
          method: POST
          body: '{"username": "admin", "password": "{{ new_password.stdout }}"}'
          body_format: json
          validate_certs: no
          status_code: 200
      register: signup_output
      failed_when: signup_output.status != 200 and 'initialized' not in signup_output.content

    - name: Let's put our license in place
      uri:
        url: https://localhost:8083/api/v1/settings/license
        method: POST
        user: admin
        password: "{{ new_password.stdout }}"
        body: "{{ lookup('file','license_file.json') }}"
        force_basic_auth: yes
        body_format: json
        validate_certs: no
        status_code: 200,400
            # We are ignoring errors here as if the license is already there then this can error

    - name: Pull a bad image or two as well as something nice like alpine
      command: docker pull {{ item }}
      with_items:
        - imiell/bad-dockerfile
        - morello/docker-whale
        - jenkins
        - linuxkonsult/kali-metasploit
        - alpine


      # had lots of trouble due to https://github.com/kubernetes/kubernetes/issues/43805
      # prior to running kubeadm init


    # - name: populate a selection of registries to scan
    # - name: populate json for compliance e.g. HIPAA
    # - name: put on the socks application (and can we generate some sales?)
    # - name: put jenkins plugin on that container
    # - name: create a default job to show

    - name: Let the user know the password
      debug: msg="System {{ inventory_hostname }} has an admin password of {{ new_password.stdout }}"

  handlers:
      # This is the handler to restart the operating system
    - name: restart host
      # we want to run in the background '( ... )' so as not to fail when our connection severss
      shell: ( sleep 2 && shutdown -r now "Ansible updates triggered" )
      async: 0
      poll: 0
      ignore_errors: true
      notify: wait for host

    - name: wait for host
      local_action: wait_for host="{{ ansible_host }}" delay=15 state=started port="{{ ansible_port }}" connect_timeout=10 timeout=180
